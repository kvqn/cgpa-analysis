generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("OTHER_DATABASE_URL")
}

model migrations {
  name String @id @db.VarChar(255)
}

model SubjectDetails {
  code    String @id @db.Char(10)
  name    String @db.Char(100)
  credits Int    @db.SmallInt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  hearts          FileHearts[]
  FileViews       FileViews[]
  allowedToUpload Boolean?     @default(false)
  File            File[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum FileType {
  PDF
  JPEG
}

model File {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  blob         Bytes
  type         FileType
  createdAt    DateTime     @default(now()) @db.DateTime(6)
  FileViews    FileViews[]
  FileHearts   FileHearts[]
  uploadedBy   User         @relation(fields: [uploadedById], references: [id], onUpdate: Restrict)
  uploadedById String
  FileTags     FileTags[]
}

model FileHearts {
  userId String
  fileId Int

  user User @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "user_hearts_ibfk_1", onDelete: Cascade)
  file File @relation(fields: [fileId], references: [id], onUpdate: Restrict, map: "user_hearts_ibfk_2", onDelete: Cascade)

  @@id([userId, fileId])
}

model FileViews {
  id     Int     @id @default(autoincrement())
  fileId Int
  userId String?

  file File  @relation(fields: [fileId], references: [id], onUpdate: Restrict, map: "file_views_ibfk_1", onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "file_views_ibfk_2", onDelete: Cascade)
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  FileTags FileTags[]
}

model FileTags {
  fileId Int
  tagId  Int

  file File @relation(fields: [fileId], references: [id], onUpdate: Restrict, map: "file_tags_ibfk_1", onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onUpdate: Restrict, map: "file_tags_ibfk_2", onDelete: Cascade)

  @@id([fileId, tagId])
}

enum NoticeType {
  LATEST_NEWS
  NOTICES
  JOBS
  TENDERS
  FORTHCOMING_EVENTS
  FIRST_YEAR_NOTICES
}

model Notice {
  id    Int        @id @default(autoincrement())
  title String     @db.Text
  link  String
  date  DateTime?  @db.Date
  type  NoticeType
}
