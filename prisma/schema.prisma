generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("OTHER_DATABASE_URL")
}

model migrations {
  name String @id @db.VarChar(255)
}

model SubjectDetails {
  code    String @id @db.Char(10)
  name    String @db.Char(100)
  credits Int    @db.SmallInt
}

enum FileType {
  PDF
  JPEG
}

model file {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  blob       Bytes
  type       FileType
  createdAt  DateTime     @default(now()) @db.DateTime(6)
  pyq        pyq[]
  FileViews  FileViews[]
  FileHearts FileHearts[]
}

enum PyqType {
  MID_TERM_QUESTIONS
  END_TERM_QUESTIONS
  MID_TERM_ANSWERS
  END_TERM_ANSWERS
  SUPPLEMENTARY_QUESTIONS
}

model pyq {
  subject_code  String
  subject_name  String
  year          Int
  type          PyqType
  uploadedBy_id String
  uploadedBy    User    @relation(fields: [uploadedBy_id], references: [id], onUpdate: Restrict, map: "pyq_ibfk_2")
  fileId        Int     @id
  file          file    @relation(fields: [fileId], references: [id], onUpdate: Restrict, map: "pyq_ibfk_1")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  pyq             pyq[]
  hearts          FileHearts[]
  FileViews       FileViews[]
  allowedToUpload Boolean?     @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FileHearts {
  userId String
  fileId Int

  user User @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "user_hearts_ibfk_1")
  file file @relation(fields: [fileId], references: [id], onUpdate: Restrict, map: "user_hearts_ibfk_2")

  @@id([userId, fileId])
}

model FileViews {
  id     Int     @id @default(autoincrement())
  fileId Int
  userId String?

  file file  @relation(fields: [fileId], references: [id], onUpdate: Restrict, map: "file_views_ibfk_1")
  user User? @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "file_views_ibfk_2")
}

enum NoticeType {
  LATEST_NEWS
  NOTICES
  JOBS
  TENDERS
  FORTHCOMING_EVENTS
  FIRST_YEAR_NOTICES
}

model Notice {
  id    Int        @id @default(autoincrement())
  title String     @db.Text
  link  String
  date  DateTime?  @db.Date
  type  NoticeType
}
